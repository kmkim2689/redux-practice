먼저, 카운터 앱을 Vanilla JS로 구현하고자 함.

Vanilla JS로 구현할 것이기 때문에, src 폴더에서 index.js를 제외한 모든 파일들을 삭제한다.(index.js 파일만 남게 됨)

그 후, public 폴더에서 index.html 파일을 통해 직접 element들을 추가한다.

body 안에 다음과 같이 넣는다.
<button id="add">Add</button>
<span>0</span>
<button id="minus">Minus</button>

그 후, 웹사이트를 동적으로 만들기 위하여 index.js(src에 있음)에서 작성

const add = document.getElementById("add");
const minus = document.getElementById("minus");
const number = document.querySelector("span");

let count = 0;

number.innerText = count;

const updateText = () => {
  number.innerText = count;
}

const handleAdd = () => {
  count += 1;
  updateText();
  console.log("add");
}

const handleMinus = () => {
  count -= 1;
  updateText();
  console.log("minus");
}

add.addEventListener("click", handleAdd);
minus.addEventListener("click", handleMinus);

npm start를 터미널에 입력하면, 앱이 실행된다.

*** 하지만, 이렇게 긴 코드를 Redux를 사용하면 획기적으로 그 길이를 줄일 수 있게 된다.
=> Vanilla Redux

* Redux 사용법
1. npm install redux 터미널에 입력
2. index.js 파일에 createStore import한다.
3. redux에서 사용되는 요소들
(i) store : data(state)들이 저장되는 장소 => createStore 함수를 이용하여 생성됨
(ii) reducer : createStore의 인자로 들어가는 함수. 즉, store를 생성하기 위해서는 reducer 함수를 만들어야 함. reducer는 "data(state)를 modify하는 함수"임.
(iii) action : reducer 함수로 들어가는 두 번째 매개변수(참고로 첫번째 매개변수는 변경의 대상이 되는 state변수). '어떻게' 첫번째 매개변수의 값을 변화시킬지 결정 => state의 변경을 위해 reducer 함수와 소통하는 수단. 예를 들어, count 변수는 항상 같은 양상으로 변화하지 않음. 플러스 버튼을 누르면 +1이 되어야 하고, 마이너스 버튼을 누르면 -1이 되어야 한다. action이 상황을 구분하는 역할을 수행
(iv) subscribe : store 안의 변수에서 일어나느 변화들을 감지하여 알려주는 역할
store명.subscribe()를 통하여 이용


import { createStore } from "redux";
- store란? data를 넣는 곳. data는 곧 state 변수를 의미함.
- state란? 애플리케이션 상에서 변경될 수 있는 데이터
=> 해당 js 코드에서, count가 바로 변경되는 부분임. (react에서 count는 state라고 볼 수 있음...)

redux에 존재하는 createStore 함수가 하는 일 : 변경되면 화면에 반영되어야 하는 data(state)를 넣을 수 있는 장소를 생성하는 것이다. 
=> Redux는 data를 관리하는 데 도와주는 역할을 하기 위하여 만들어졌다...

이 프로젝트 상에서 store는 count 값의 변화. 즉, -1 혹은 +1을 count하도록 도와줌.
=> count(state)는 store에 저장되어야 함

const store = createStore(reducer함수)

* createStore()의 인자로, reducer 함수가 들어가야 한다

* reducer란 ? 함수
- 어떤 역할을 하는가? : state(data) 값을 변경하는 역할을 수행.

- 형태
const reducer명 = () => {};

- reducer 함수에서 반환하는 데이터는 store 변수의 값이 된다.

예를 들어, countModifier라는 이름의 reducer 함수가 hello라는 문자열을 반환한다고 가정

const countModifier = () => {
  return "hello";
};

const countStore = createStore(countModifier)

이렇게 되면, countStore 값을 출력(console.log(countStore))하면, 4개의 필드(함수)로 구성된 객체가 반환된다. 각 필드들은 다음과 같다.
- dispatch()
- subscribe()
- getState() => state 변수의 값을 가져오는 역할... 즉 reducer 함수가 반환되어 store에 저장된 값을 가져오게 됨
- replaceUser()

ex: console.log(countStore.getState()) // "hello"

reducer의 기능 : 애플리케이션 상의 데이터(state)를 변경 가능 => reducer 함수만 유일하게 이러한 기능을 수행할 수 있다...(중요)

만약 특정 데이터를 변경하고 싶다면, reducer 함수의 인자로 state 변수(이전값)를 넘겨주면 된다.

ex : 
const countModifier = (state) => {
  return state + 1;
}

+ 기본값을 넘겨줌으로써, 변수의 초기값을 설정할 수 있다.

ex :
const countModifier = (state = 0) => {
  console.log(state) // state의 변경이 없었다면 0 출력. 만약 기본값 미설정시 undefined 출력
  return state;
};

const countStore = createStore(countModifier)
console.log(countStore.getState()); // 0


* action 세팅하기
- action은 reducer 함수에서 두 번째 매개변수로 투입된다.
- action은 데이터가 바뀌는 타입에 대한 표지라고 보면 됨(데이터의 predictable한 change가 가능해짐)
- action을 사용하기 위해서는(데이터 변경 양상을 결정하고 실제로 변경을 신청), store명.dispatch() 함수를 사용한다. 함수의 인자로는 객체가 들어가는데, 필드는 type을 사용한다. type의 값으로 action의 이름을 대문자(굳이 대문자일 필요는 없음)로 명시해주면 된다.

ex : 
const countModifier = (count = 0, action) => {
  if (action.type === "ADD") {
    return count + 1;
  }
  return count;
};

const countStore = createStore(countModifier);
// dispatch()를 이용하여 정해진 action에 따라 modifier(reducer)가 실행(데이터 값의 변경)되도록 한다.
countStore.dispatch({ type: "ADD"});
// dispatch()가 실행되는 순간, countModifier()가 호출되어 정해진 action에 따라 데이터의 값이 변경

console.log(countStore.getState()) // dispatch된 결과 변경된 데이터 값이 출력됨(count에 1이 더해진 값)



* dispatch를 버튼에 연결 : addEventListener